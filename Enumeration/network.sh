#!/bin/bash

#3.1-3.2
function netipv4 {
forward=$(cat /proc/sys/net/ipv4/ip_forward)
redirectAll=$(cat /proc/sys/net/ipv4/conf/all/send_redirects)
redirectDef=$(cat /proc/sys/net/ipv4/conf/default/send_redirects)


if [[ $forward -ne "0" ]]; then 
echo "No esta permitido el formwading de paquetes"
echo "Solucion: echo 0 > /proc/sys/net/ipv4/ip_formward"
fi 

if [[ $redirectAll -ne "0" ]]; then 
echo "No esta permitido el reenvio de paquetes de rutas a traves de ICMP en todas las interfaces"
echo "Solucion: echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects"
fi 

if [[ $redirectDef -ne "0" ]]; then 
echo "No esta permitido el reenvio de paquetes de rutas a traves de ICMP en las interfaces por defecto"
echo "Solucion: echo 0 > /proc/sys/net/ipv4/conf/default/send_redirects"
fi 

if [[ $redirectAll -ne "0" ]]; then 
echo "No esta permitido las opciones de seleccion de rutas SSR y LSR en todas las interfaces"
echo "Solucion: echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route"
fi 

sourceAll=$(cat /proc/sys/net/ipv4/conf/all/accept_source_route)
sourceDef=$(cat /proc/sys/net/ipv4/conf/default/accept_source_route)

if [[ $sourceDef -ne "0" ]]; then 
echo "No esta permitido las opciones de seleccion de rutas SSR y LSR en las interfaces por defecto"
echo "Solucion: echo 0 > /proc/sys/net/ipv4/conf/default/accept_source_route"
fi 

if [[ $sourceAll -ne "0" ]]; then 
echo "No esta permitido las opciones de seleccion de rutas SSR y LSR"
echo "Solucion: echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route"
fi 

icmpAll=$(cat /proc/sys/net/ipv4/conf/all/secure_redirects)
icmpDef=$(cat /proc/sys/net/ipv4/conf/default/secure_redirects)

if [[ $icmpAll -ne "0" ]]; then 
echo "No esta permitido el reenvio de paquetes ICMP en todas las interfaces"
echo "Solucion: echo 0 > /proc/sys/net/ipv4/conf/all/secure_redirects"
fi 

if [[ $icmpDef -ne "0" ]]; then 
echo "No esta permitido el reenvio de paquetes ICMP en las interfaces por defecto"
echo "Solucion: echo 0 > /proc/sys/net/ipv4/conf/default/accept_source_route"
fi 

logAll=$(cat /proc/sys/net/ipv4/conf/all/log_martians)
logDef=$(cat /proc/sys/net/ipv4/conf/default/log_martians)

if [[ $logAll -ne "1" ]]; then 
echo "Debe registrarse la recepcion de paquetes con direcciones origen no alcanazables como sospechoso en todas las interfaces"
echo "Solucion: echo 1 > /proc/sys/net/ipv4/conf/all/log_martians"
fi 

if [[ $logDef -ne "1" ]]; then 
echo "Debe registrarse la recepcion de paquetes con direcciones origen no alcanazables como sospechoso en las interfaces por defecto"
echo "Solucion: echo 1 > /proc/sys/net/ipv4/conf/default/log_martians"
fi 


icmpBrod=$(cat /proc/sys/net/icmp_echo_ignore_broadcasts)
icmpBogus=$(cat /proc/sys/net/icmp_ignore_bogus_error_responses)

if [[ $icmpBrod -ne "1" ]]; then 
echo "No debe aceptarse los paquetes ICMP de tipo broadcast"
echo "Solucion: echo 1 > /proc/sys/net/icmp_echo_ignore_broadcasts"
fi 

if [[ $icmpBogus -ne "1" ]]; then 
echo "No debe aceptarse los paquetes ICMP logging bogus responses"
echo "Solucion: echo 1 > /proc/sys/net/icmp_ignore_bogus_error_responses"
fi 

revPathFiltAll=$(cat /proc/sys/net/ipv4/conf/all/rp_filter)
revPathFiltDef=$(cat /proc/sys/net/ipv4/conf/default/rp_filter)

if [[ $revPathFiltAll -ne "1" ]]; then 
echo "Deben validarse la direccion IP origen y el puerto por el que se recibe el paquete en todas las interfaces"
echo "Solucion: echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter"
fi 

if [[ $revPathFiltDef -ne "1" ]]; then 
echo "Deben validarse la direccion IP origen y el puerto por el que se recibe el paquete en la interfaz por defecto"
echo "Solucion: echo 1 > /proc/sys/net/ipv4/conf/default/rp_filter"
fi 

synCookie=$(cat /proc/sys/net/tcp_syncookies)

if [[ $synCookie -ne "1" ]]; then 
echo "Debe activarse el uso de SYN Cookies para evitar ataques de DDos"
echo "Solucion: echo 1 > /proc/sys/net/tcp_syncookies"
fi 

}

#3.3
function netipv6 {
ipv6All=$(cat /proc/sys/net/ipv6/conf/all/disable_ipv6)
ipv6Def=$(cat /proc/sys/net/ipv6/conf/default/disable_ipv6)

if [[ $ipv6All -ne "1" ]]; then 
echo "Debe deshabilitar IPV6 en todas las interfaces"
echo "Solucion: echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6"
fi 

if [[ $ipv6Def -ne "1" ]]; then 
echo "Debe deshabilitar IPV6 en las interfaces por defecto"
echo "Solucion: echo 1 > /proc/sys/net/ipv6/conf/default/disable_ipv6"
fi 

ipv6raAll=$(cat /proc/sys/net/ipv6/conf/all/accept_ra)
ipv6raDef=$(cat /proc/sys/net/ipv6/conf/default/accept_ra)

if [[ $ipv6raAll -ne "0" ]]; then 
echo "Debe deshabilitar IPV6 router advertisement en todas las interfaces"
echo "Solucion: echo 0 > /proc/sys/net/ipv6/conf/all/accept_ra"
fi 

if [[ $ipv6raeth0 -ne "0" ]]; then 
echo "Debe deshabilitar IPV6 router advertisement en las interfaces por defecto"
echo "Solucion: echo 0 > /proc/sys/net/ipv6/conf/default/accept_ra"
fi 

ipv6reAll=$(cat /proc/sys/net/ipv6/conf/all/accept_redirects)
ipv6reDef=$(cat /proc/sys/net/ipv6/conf/default/accept_redirects)

if [[ $ipv6reAll -ne "0" ]]; then 
echo "Debe deshabilitar la redireccion de mensajes ICMP en todas las interfaces"
echo "Solucion: echo 0 > /proc/sys/net/ipv6/conf/all/accept_redirects"
fi 

if [[ $ipv6reDef -ne "0" ]]; then 
echo "Debe deshabilitar la redireccion de mensajes ICMP en las interfaces por defecto"
echo "Solucion: echo 0 > /proc/sys/net/ipv6/conf/default/accept_redirects"
fi 

}

#3.4
function tcpWrapper {
hostsAllow=$(cat /etc/hosts.allow)

#Si no hay hosts permitidos, debe configurarse para solo permitir trafico procedente de hosts concretos
if [[ -z $hostsAllow ]]; then
echo "No hay filtrado de hosts usando el fichero /etc/hosts.allow"
fi 

hostsDeny=$(cat /etc/hosts.deny)

#Debe configurarse para que no permita ningun hosts
if [[ -z $hostsDeny ]]; then
echo "No hay filtrado de hosts usando el fichero /etc/hosts.deny"
echo "Solucion: echo \"ALL:ALL\" >> /etc/hosts.deny"
fi 

permissionAllow=$(stat /etc/hosts.allow | grep 0644)
userAllow=$(ls -l /etc/hosts.allow| awk '{print $3}')
groupAllow=$(ls -l /etc/hosts.allow | awk '{print $4}')
permissionDeny=$(stat /etc/hosts.deny | grep 0644)
userDeny=$(ls -l /etc/hosts.deny | awk '{print $3}')
groupDeny=$(ls -l /etc/hosts.deny | awk '{print $4}')

if [[ -z $permissionAllow ]]; then
echo "Los permisos del fichero /etc/hosts.allow no son 0644"
stat /etc/hosts.allow
fi 

if [[ "$userAllow" != "root" ]]; then
echo "El fichero /etc/hosts.allow no esta asignado al usuario root"
stat /etc/hosts.allow
fi

if [[ "$groupAllow" != "root" ]]; then
echo "El fichero /etc/hosts.allow no esta asignado al grupo root"
stat /etc/hosts.allow
fi

if [[ -z $permissionDeny ]]; then
echo "Los permisos del fichero /etc/hosts.deny no son 0644"
stat /etc/hosts.deny
fi 

if [[ "$userDeny" != "root" ]]; then
echo "El fichero /etc/hosts.deny  no esta asignado al usuario root"
stat /etc/hosts.deny
fi

if [[ "$groupDeny" != "root" ]]; then
echo "El fichero /etc/hosts.deny no esta asignado al grupo root"
stat /etc/hosts.deny
fi

}

#3.5
function unComNetProto {
dccp=$(cat /etc/modprobe.d/CIS.conf | grep "install dccp /bin/true")
sctp=$(cat /etc/modprobe.d/CIS.conf | grep "install sctp /bin/true")
rds=$(cat /etc/modprobe.d/CIS.conf | grep "install rds /bin/true")
tipc=$(cat /etc/modprobe.d/CIS.conf | grep "install tipc /bin/true")


if [[ -z $dccp ]]; then
echo "El demonio DCCP debe bloquearse"
echo "echo install dccp /bin/true >> /etc/modprobe.d/CIS.conf"
fi 

if [[ -z $sctp ]]; then
echo "El demonio SCTP debe bloquearse"
echo "echo install sctp /bin/true >> /etc/modprobe.d/CIS.conf"
fi 

if [[ -z $rds ]]; then
echo "El demonio RDS debe bloquearse"
echo "echo install rds /bin/true >> /etc/modprobe.d/CIS.conf"
fi 

if [[ -z $tipc ]]; then
echo "El demonio TIPC debe bloquearse"
echo "echo install tipc /bin/true >> /etc/modprobe.d/CIS.conf"
fi 

}


